version: '3'

networks:
  frontend:
    driver: ${NETWORKS_DRIVER}
  backend:
    driver: ${NETWORKS_DRIVER}

volumes:
  # mysql:
  #   driver: ${VOLUMES_DRIVER}
  # redis:
  #   driver: ${VOLUMES_DRIVER}
  elasticsearch:
    driver: ${VOLUMES_DRIVER}
  elasticsearch-head:
    driver: ${VOLUMES_DRIVER}
  kibana:
    driver: ${VOLUMES_DRIVER}
  zookeeper:
    driver: ${VOLUMES_DRIVER}
  kafka:
    driver: ${VOLUMES_DRIVER}
  etcd:
    driver: ${VOLUMES_DRIVER}
  consul-server1:
    driver: ${VOLUMES_DRIVER}
  consul-server2:
    driver: ${VOLUMES_DRIVER}
  consul-server3:
    driver: ${VOLUMES_DRIVER}
  consul-client:
    driver: ${VOLUMES_DRIVER}
services:
  ## MySQL ################################################
  mysql:
    build:
      context: ./mysql
      args:
        - MYSQL_VERSION=${MYSQL_VERSION}
    environment:
      - MYSQL_DATABASE=${MYSQL_DATABASE}
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - TZ=${WORKSPACE_TIMEZONE}
    volumes:
      - ${DATA_PATH_HOST}/mysql:/var/lib/mysql
      - ${MYSQL_ENTRYPOINT_INITDB}:/docker-entrypoint-initdb.d
    ports:
      - "${MYSQL_PORT}:3306"
    networks:
      - backend
## Redis ################################################
  redis:
    build: ./redis
    volumes:
      - ${DATA_PATH_HOST}/redis:/data
    ports:
      - "${REDIS_PORT}:6379"
    networks:
      - backend
### Redis Cluster ##########################################
  redis-cluster:
    build: ./redis-cluster
    ports:
      - "${REDIS_CLUSTER_PORT_RANGE}:7000-7005"
    networks:
      - backend

  ## ElasticSearch ########################################
  elasticsearch:
    build:
      context: ./elasticsearch
      args:
        - ELK_VERSION=${ELK_VERSION}
    volumes:
      - ${DATA_PATH_HOST}/elasticsearch:/usr/share/elasticsearch/data
    environment:
      - cluster.name=godock-cluster
      - node.name=godock-node
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms256m -Xmx256m"
      - cluster.initial_master_nodes=godock-node
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    ports:
      - "${ELASTICSEARCH_HOST_HTTP_PORT}:9200"
      - "${ELASTICSEARCH_HOST_TRANSPORT_PORT}:9300"
    networks:
      - frontend
      - backend
## ElasticSearch-head########################################
  elasticsearch-head:
    build:
      context: ./elasticsearch-head
    ports:
      - "${ELASTICSEARCH_HEAD_HTTP_PORT}:9100"
    depends_on:
      - elasticsearch
    networks:
      - frontend
      - backend
### Kibana ##############################################
  kibana:
    build:
      context: ./kibana
      args:
        - ELK_VERSION=${ELK_VERSION}
    environment:
      # - XPACK_MONITORING_ENABLED: "true"
      # - XPACK_MONITORING_UI_CONTAINER_ELASTICSEARCH_ENABLED: "true"
      - "ELASTICSEARCH_HOSTS=http://elasticsearch:9200"
      # - CSP_STRICT: "true"
    ports:
      - "${KIBANA_HTTP_PORT}:5601"
    depends_on:
      - elasticsearch
    networks:
      - frontend
      - backend
### Zookeeper ##############################################
  zookeeper:
    build: 
      context: ./zookeeper
    ports:
      - "${ZOOKEEPER_PORT}:2181"
    restart: always
    depends_on:
      - elasticsearch
    networks:
      - backend
  kafka:
    build:
      context: ./kafka
    restart: 
      always
    ports:
      - "${KAKFA_PORT}:9092"
    expose: 
      [9092]
    depends_on:
      - zookeeper
    environment:
      KAFKA_ADVERTISED_HOST_NAME: kafka
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_PORT: "${KAKFA_PORT}"
      KAFKA_HEAP_OPTS: -Xms256m -Xmx256m
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENERS: PLAINTEXT://kafka:9092

    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - backend
### ETCD
  etcd: 
    container_name: etcd0
    build:
      context: ./etcd
    ports:
      - "${ETCD_HOST_PORT_1}:2379"
      - "${ETCD_HOST_PORT_2}:2380"
    volumes:
      - ${DATA_PATH_HOST}/etcd:/etcd-data
    command: 
      /usr/local/bin/etcd
      -name etcd0
      -data-dir /etcd-data
      -initial-advertise-peer-urls http://${HOST_IP}:2380
      -listen-peer-urls http://0.0.0.0:2380
      -advertise-client-urls http://${HOST_IP}:2379
      -listen-client-urls http://0.0.0.0:2379 
      -initial-cluster etcd0=http://${HOST_IP}:2380
    networks:
      - backend
      - frontend

### Consule
  consul-server1:
    image: consul:1.9.3
    container_name: consul-server1
    restart: always
    volumes:
      - ./consul/server1.json:/consul/config/server1.json:ro
      - ./consul/consul_acl.json:/consul/config/consul_acl.json:ro
      - ./consul/certs/:/consul/config/certs/:ro
    networks:
      - backend
    ports:
      - '8500:8500'
      - '8600:8600/tcp'
      - '8600:8600/udp'
    command: 'agent -bootstrap-expect=3'

  consul-server2:
    image: consul:1.9.3
    container_name: consul-server2
    restart: always
    volumes:
      - ./consul/server2.json:/consul/config/server2.json:ro
      - ./consul/consul_acl.json:/consul/config/consul_acl.json:ro
      - ./consul/certs/:/consul/config/certs/:ro
    networks:
      - backend
    command: 'agent -bootstrap-expect=3'

  consul-server3:
    image: consul:1.9.3
    container_name: consul-server3
    restart: always
    volumes:
      - ./consul/server3.json:/consul/config/server3.json:ro
      - ./consul/consul_acl.json:/consul/config/consul_acl.json:ro
      - ./consul/certs/:/consul/config/certs/:ro
    networks:
      - backend
    command: 'agent -bootstrap-expect=3'

  consul-client:
    image: consul:1.9.3
    container_name: consul-client
    restart: always
    volumes:
      - ./consul/client.json:/consul/config/client.json:ro
      - ./consul/consul_acl.json:/consul/config/consul_acl.json:ro
      - ./consul/certs/:/consul/config/certs/:ro
    networks:
      - backend
    command: 'agent'
